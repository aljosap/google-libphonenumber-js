name: Update libphonenumber JavaScript

permissions:
  contents: write

on:
  workflow_dispatch:
  schedule:
    - cron: '0 3 * * *'

jobs:
  update-libphonenumber:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout this repo
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Get latest libphonenumber release
        id: get_release
        run: |
          latest=$(curl -s https://api.github.com/repos/google/libphonenumber/releases/latest | jq -r .tag_name)
          echo "latest_tag=$latest" >> $GITHUB_OUTPUT

      - name: Read current version
        id: read_version
        run: |
          if [ -f LIBPHONENUMBER_VERSION ]; then
            current=$(cat LIBPHONENUMBER_VERSION)
          else
            current=""
          fi
          echo "current_tag=$current" >> $GITHUB_OUTPUT

      - name: Check if update is needed
        id: check_update
        run: |
          if [ "${{ steps.get_release.outputs.latest_tag }}" = "${{ steps.read_version.outputs.current_tag }}" ]; then
            echo "No update needed."
            echo "update_needed=false" >> $GITHUB_OUTPUT
          else
            echo "Update needed."
            echo "update_needed=true" >> $GITHUB_OUTPUT
          fi

      - name: Exit if no update needed
        if: steps.check_update.outputs.update_needed == 'false'
        run: exit 0

      - name: Install build dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y openjdk-17-jdk maven git protobuf-compiler

      - name: Clone libphonenumber
        run: |
          git clone --depth 1 --branch ${{ steps.get_release.outputs.latest_tag }} https://github.com/google/libphonenumber.git

      - name: Generate JavaScript version
        run: |
          cd libphonenumber
          mvn clean package -Pjavascript
          cp -r javascript ../generated-js
          cd ..
          rm -rf libphonenumber

      - name: Update generated code in repo
        run: |
          rm -rf src/libphonenumber-js
          mkdir -p src/libphonenumber-js
          cp -r generated-js/* src/libphonenumber-js/
          rm -rf generated-js
          echo "${{ steps.get_release.outputs.latest_tag }}" > LIBPHONENUMBER_VERSION

      - name: Determine next package version
        id: versioning
        run: |
          UPSTREAM_VERSION=$(echo "${{ steps.get_release.outputs.latest_tag }}" | sed 's/^v//')
          SUFFIX="aljosa"
          if [ -f MY_VERSION ]; then
            LAST_VERSION=$(cat MY_VERSION)
            LAST_UPSTREAM=$(echo "$LAST_VERSION" | sed 's/-'"$SUFFIX"'.*//')
            if [ "$LAST_UPSTREAM" = "$UPSTREAM_VERSION" ]; then
              LAST_SUFFIX=$(echo "$LAST_VERSION" | sed 's/.*-'"$SUFFIX"'.//')
              NEXT_SUFFIX=$((LAST_SUFFIX + 1))
            else
              NEXT_SUFFIX=1
            fi
          else
            NEXT_SUFFIX=1
          fi
          NEXT_VERSION="${UPSTREAM_VERSION}-${SUFFIX}.${NEXT_SUFFIX}"
          echo "$NEXT_VERSION" > MY_VERSION
          echo "next_version=$NEXT_VERSION" >> $GITHUB_OUTPUT

      - name: Generate TypeScript definitions
        run: |
          cd src/libphonenumber-js
          cat > libphonenumber.d.ts << 'EOF'
          declare namespace libphonenumber {
            export class PhoneNumberUtil {
              static getInstance(): PhoneNumberUtil;
              parse(number: string, region?: string): PhoneNumber;
              format(number: PhoneNumber, format: PhoneNumberFormat): string;
              isValidNumber(number: PhoneNumber): boolean;
              isValidNumberForRegion(number: PhoneNumber, region: string): boolean;
              getRegionCodeForNumber(number: PhoneNumber): string | null;
              getNumberType(number: PhoneNumber): PhoneNumberType;
              isPossibleNumber(number: PhoneNumber): boolean;
              isPossibleNumberString(number: string, regionDialingFrom?: string): boolean;
              truncateTooLongNumber(number: PhoneNumber): boolean;
              isNumberMatch(firstNumber: string | PhoneNumber, secondNumber: string | PhoneNumber): MatchType;
              findNumbers(text: string, defaultRegion?: string): PhoneNumberMatch[];
              parseAndKeepRawInput(number: string, regionCode?: string): PhoneNumber;
            }

            export class PhoneNumber {
              getCountryCode(): number;
              getNationalNumber(): number;
              getExtension(): string | null;
              clearExtension(): void;
              getNumberOfLeadingZeros(): number;
              setNumberOfLeadingZeros(numberOfLeadingZeros: number): void;
              hasNumberOfLeadingZeros(): boolean;
              clearNumberOfLeadingZeros(): void;
              isItalianLeadingZero(): boolean;
              setItalianLeadingZero(isLeadingZero: boolean): void;
              hasItalianLeadingZero(): boolean;
              clearItalianLeadingZero(): void;
              getRawInput(): string | null;
              setRawInput(rawInput: string): void;
              hasRawInput(): boolean;
              clearRawInput(): void;
              getCountryCodeSource(): PhoneNumber.CountryCodeSource;
              setCountryCodeSource(countryCodeSource: PhoneNumber.CountryCodeSource): void;
              hasCountryCodeSource(): boolean;
              clearCountryCodeSource(): void;
              getPreferredDomesticCarrierCode(): string | null;
              setPreferredDomesticCarrierCode(preferredDomesticCarrierCode: string): void;
              hasPreferredDomesticCarrierCode(): boolean;
              clearPreferredDomesticCarrierCode(): void;
            }

            export class PhoneNumberMatch {
              start(): number;
              end(): number;
              number(): PhoneNumber;
              rawString(): string;
            }

            export enum PhoneNumberFormat {
              E164 = 0,
              INTERNATIONAL = 1,
              NATIONAL = 2,
              RFC3966 = 3
            }

            export enum PhoneNumberType {
              FIXED_LINE = 0,
              MOBILE = 1,
              FIXED_LINE_OR_MOBILE = 2,
              TOLL_FREE = 3,
              PREMIUM_RATE = 4,
              SHARED_COST = 5,
              VOIP = 6,
              PERSONAL_NUMBER = 7,
              PAGER = 8,
              UAN = 9,
              VOICEMAIL = 10,
              UNKNOWN = -1
            }

            export enum MatchType {
              NOT_A_NUMBER = 0,
              NO_MATCH = 1,
              SHORT_NSN_MATCH = 2,
              NSN_MATCH = 3,
              EXACT_MATCH = 4
            }

            export namespace PhoneNumber {
              export enum CountryCodeSource {
                FROM_NUMBER_WITH_PLUS_SIGN = 1,
                FROM_NUMBER_WITH_IDD = 5,
                FROM_NUMBER_WITHOUT_PLUS_SIGN = 10,
                FROM_DEFAULT_COUNTRY = 20
              }
            }

            export class AsYouTypeFormatter {
              constructor(region: string);
              inputDigit(digit: string): string;
              clear(): void;
              inputDigitAndRememberPosition(digit: string): string;
              getRememberedPosition(): number;
            }

            export class ShortNumberInfo {
              static getInstance(): ShortNumberInfo;
              isPossibleShortNumber(number: PhoneNumber): boolean;
              isValidShortNumber(number: PhoneNumber): boolean;
              isPossibleShortNumberForRegion(number: PhoneNumber, regionCode: string): boolean;
              isValidShortNumberForRegion(number: PhoneNumber, regionCode: string): boolean;
              getExpectedCost(number: PhoneNumber): ShortNumberCost;
              getExpectedCostForRegion(number: PhoneNumber, regionCode: string): ShortNumberCost;
            }

            export enum ShortNumberCost {
              PREMIUM_RATE = 0,
              STANDARD_RATE = 1,
              TOLL_FREE = 2,
              UNKNOWN_COST = 3
            }

            export class MetadataLoader {
              loadMetadata(metadataPath: string): void;
            }
          }

          declare module 'libphonenumber-js' {
            export = libphonenumber;
          }
          EOF

          cat > index.d.ts << 'EOF'
          export * from './libphonenumber';
          EOF

      - name: Generate package.json in generated directory
        run: |
          cat > src/libphonenumber-js/package.json <<EOF
          {
            "name": "@aljosap/libphonenumber-js",
            "version": "${{ steps.versioning.outputs.next_version }}",
            "description": "JavaScript build of Google's libphonenumber library",
            "main": "libphonenumber.js",
            "types": "libphonenumber.d.ts",
            "files": [
              "*.js",
              "*.d.ts",
              "resources/"
            ],
            "repository": {
              "type": "git",
              "url": "https://github.com/aljosap/google-libphonenumber-js.git"
            },
            "keywords": [
              "libphonenumber",
              "phone",
              "validation",
              "google",
              "typescript"
            ],
            "author": "Aljosa Petkovic <aljosa3@gmail.com>",
            "license": "Apache-2.0",
            "homepage": "https://github.com/aljosap/google-libphonenumber-js#readme",
            "engines": {
              "node": ">=14.0.0"
            }
          }
          EOF

      - name: Setup Node.js for npm publishing
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          registry-url: 'https://registry.npmjs.org/'

      - name: Publish to npm
        run: |
          cd src/libphonenumber-js
          echo "//registry.npmjs.org/:_authToken=${NODE_AUTH_TOKEN}" > .npmrc
          npm publish --access public
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

      - name: Commit and push changes
        uses: stefanzweifel/git-auto-commit-action@v5
        with:
          commit_message: "chore: update libphonenumber to ${{ steps.get_release.outputs.latest_tag }} (version ${{ steps.versioning.outputs.next_version }})"
          branch: main
          file_pattern: 'src/libphonenumber-js/* LIBPHONENUMBER_VERSION MY_VERSION'
          push_options: '--force-with-lease'
          commit_user_name: github-actions[bot]
          commit_user_email: github-actions[bot]@users.noreply.github.com
