name: Build and Publish libphonenumber

on:
  schedule:
    # Run weekly to check for new versions
    - cron: '0 0 * * 1'
  workflow_dispatch:
    # Allow manual triggering

jobs:
  check-and-build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          registry-url: 'https://registry.npmjs.org'

      - name: Set up Java
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '11'

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y ant ant-contrib maven

      - name: Clone libphonenumber repository
        run: |
          git clone https://github.com/google/libphonenumber.git libphonenumber-source
          cd libphonenumber-source
          CURRENT_VERSION=$(grep -o 'v[0-9]\+\.[0-9]\+\.[0-9]\+' release_notes.txt | head -1 | sed 's/v//')
          echo "CURRENT_VERSION=$CURRENT_VERSION" >> $GITHUB_ENV

      - name: Check for new version
        id: check-version
        run: |
          if [ -f "version.txt" ]; then
            PREVIOUS_VERSION=$(cat version.txt)
            echo "Previous version: $PREVIOUS_VERSION"
            echo "Current version: $CURRENT_VERSION"
            if [ "$PREVIOUS_VERSION" = "$CURRENT_VERSION" ]; then
              echo "No new version available. Skipping build."
              echo "NEW_VERSION=false" >> $GITHUB_ENV
            else
              echo "New version available. Building..."
              echo "NEW_VERSION=true" >> $GITHUB_ENV
            fi
          else
            echo "No previous version found. Building..."
            echo "NEW_VERSION=true" >> $GITHUB_ENV
          fi

      - name: Clone dependencies
        if: env.NEW_VERSION == 'true'
        run: |
          git clone https://github.com/google/closure-library.git
          git clone https://github.com/google/closure-compiler.git
          git clone https://github.com/google/closure-linter.git
          git clone https://github.com/google/python-gflags.git
          
          # Checkout specific versions as recommended in the libphonenumber docs
          cd closure-library && git checkout v20201006 && cd ..
          cd closure-compiler && git checkout v20210302 && cd ..

      - name: Build Closure Compiler
        if: env.NEW_VERSION == 'true'
        run: |
          cd closure-compiler
          mvn -DskipTests -pl externs/pom.xml,pom-main.xml,pom-main-shaded.xml
          cd ..

      - name: Build libphonenumber JavaScript
        if: env.NEW_VERSION == 'true'
        run: |
          cd libphonenumber-source
          ant -f javascript/build.xml compile
          cd ..
          
          # Create directory structure for our package
          mkdir -p dist/lib
          cp libphonenumber-source/javascript/i18n/phonenumbers/demo-compiled.js dist/lib/libphonenumber.js
          
          # Create a minified version
          npx terser dist/lib/libphonenumber.js -o dist/lib/libphonenumber.min.js

      - name: Generate TypeScript definitions
        if: env.NEW_VERSION == 'true'
        run: |
          cat > dist/index.d.ts << 'EOF'
          declare namespace phoneUtils {
            function countryCodeToRegionCodeMap(): Record<string, string[]>;
            function isPossibleNumber(phoneNumber: string, regionCode?: string): boolean;
            function isPossibleNumberWithReason(phoneNumber: string, regionCode?: string): number;
            function isValidNumber(phoneNumber: string, regionCode?: string): boolean;
            function isValidNumberForRegion(phoneNumber: string, regionCode: string): boolean;
            function getCountryCodeForRegion(regionCode: string): number;
            function getRegionCodeForNumber(phoneNumber: string, regionCode?: string): string | null;
            function getNumberType(phoneNumber: string, regionCode?: string): number;
            function getSupportedRegions(): string[];
            function formatE164(phoneNumber: string, regionCode?: string): string;
            function formatNational(phoneNumber: string, regionCode?: string): string;
            function formatInternational(phoneNumber: string, regionCode?: string): string;
            function formatInOriginalFormat(phoneNumber: string, regionCode?: string): string;
            function formatOutOfCountryCallingNumber(phoneNumber: string, regionCode: string, target: string): string;
          }

          declare class AsYouTypeFormatter {
            constructor(regionCode?: string);
            inputDigit(digit: string): string;
            clear(): void;
          }

          export { phoneUtils, AsYouTypeFormatter };
          EOF

      - name: Create package.json
        if: env.NEW_VERSION == 'true'
        run: |
          cat > dist/package.json << EOF
          {
            "name": "google-libphonenumber-js",
            "version": "$CURRENT_VERSION",
            "description": "Google's libphonenumber library for JavaScript with TypeScript support",
            "main": "index.js",
            "types": "index.d.ts",
            "scripts": {
              "test": "echo \"Error: no test specified\" && exit 1"
            },
            "keywords": [
              "libphonenumber",
              "phone",
              "validation",
              "formatting",
              "telephone"
            ],
            "author": "Your Name",
            "license": "Apache-2.0",
            "repository": {
              "type": "git",
              "url": "https://github.com/yourusername/google-libphonenumber-js.git"
            },
            "bugs": {
              "url": "https://github.com/yourusername/google-libphonenumber-js/issues"
            },
            "homepage": "https://github.com/yourusername/google-libphonenumber-js#readme"
          }
          EOF

      - name: Create index.js
        if: env.NEW_VERSION == 'true'
        run: |
          cat > dist/index.js << 'EOF'
          const path = require('path');
          
          // Load the library
          require(path.join(__dirname, 'lib/libphonenumber.js'));
          
          // Export the phoneUtils global
          module.exports = {
            phoneUtils: global.phoneUtils,
            AsYouTypeFormatter: global.i18n.phonenumbers.AsYouTypeFormatter
          };
          EOF

      - name: Create README.md
        if: env.NEW_VERSION == 'true'
        run: |
          cat > dist/README.md << 'EOF'
          # google-libphonenumber-js

          A JavaScript version of Google's libphonenumber library with TypeScript support.

          This package is automatically generated from the original Google libphonenumber library.

          ## Installation

          ```bash
          npm install google-libphonenumber-js
          ```

          ## Usage

          ```javascript
          const { phoneUtils } = require('google-libphonenumber-js');

          // Check if a number is valid
          const isValid = phoneUtils.isValidNumber('+1 650-253-0000', 'US');
          console.log(isValid); // true

          // Format a number
          const formatted = phoneUtils.formatInternational('+1 650-253-0000', 'US');
          console.log(formatted); // +1 650-253-0000
          ```

          ## TypeScript Support

          This package includes TypeScript definitions:

          ```typescript
          import { phoneUtils, AsYouTypeFormatter } from 'google-libphonenumber-js';

          // Validate a phone number
          const isValid: boolean = phoneUtils.isValidNumber('+1 650-253-0000', 'US');

          // Format as you type
          const formatter = new AsYouTypeFormatter('US');
          console.log(formatter.inputDigit('6')); // 6
          console.log(formatter.inputDigit('5')); // 65
          console.log(formatter.inputDigit('0')); // 650
          ```

          ## API

          ### phoneUtils

          - `countryCodeToRegionCodeMap()`: Returns a map of country calling codes to region codes
          - `isPossibleNumber(phoneNumber, regionCode?)`: Checks if a number is possible
          - `isValidNumber(phoneNumber, regionCode?)`: Checks if a number is valid
          - `formatE164(phoneNumber, regionCode?)`: Formats a number in E.164 format
          - `formatNational(phoneNumber, regionCode?)`: Formats a number in national format
          - `formatInternational(phoneNumber, regionCode?)`: Formats a number in international format
          - And more...

          ### AsYouTypeFormatter

          - `new AsYouTypeFormatter(regionCode?)`: Creates a new formatter for the specified region
          - `inputDigit(digit)`: Formats the number as each digit is entered
          - `clear()`: Clears the formatter state

          ## License

          Apache-2.0 (same as the original libphonenumber library)
          EOF

      - name: Copy files to repository
        if: env.NEW_VERSION == 'true'
        run: |
          rm -rf lib/
          mkdir -p lib/
          cp -r dist/* ./
          echo "$CURRENT_VERSION" > version.txt

      - name: Commit and push changes
        if: env.NEW_VERSION == 'true'
        run: |
          git config --global user.name "GitHub Action"
          git config --global user.email "action@github.com"
          git add .
          git commit -m "Update to libphonenumber v$CURRENT_VERSION"
          git push

      - name: Publish to npm
        if: env.NEW_VERSION == 'true'
        run: npm publish
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
